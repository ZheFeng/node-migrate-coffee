#!/usr/bin/env coffee

###*
Module dependencies.
###

###*
Arguments.
###

###*
Option defaults.
###

###*
Current working directory.
###

###*
Usage information.
###

###*
Migration template.
###

# require an argument
required = ->
  return args.shift()  if args.length
  abort arg + " requires an argument"
  return

# abort with a message
abort = (msg) ->
  console.error "  %s", msg
  process.exit 1
  return

# parse arguments

###*
Load migrations.
###
migrations = ->
  fs.readdirSync("migrations").filter((file) ->
    file.match /^\d+.*\.js$/
  ).sort().map (file) ->
    join "migrations", file


###*
Log a keyed message.
###
log = (key, msg) ->
  console.log "  \u001b[90m%s :\u001b[0m \u001b[36m%s\u001b[0m", key, msg
  return

###*
Slugify the given `str`.
###
slugify = (str) ->
  str.replace /\s+/g, "-"

# create ./migrations

# ignore

# commands

###*
up [name]
###

###*
down [name]
###

###*
create [title]
###

###*
Pad the given number.

@param {Number} n
@return {String}
###
pad = (n) ->
  Array(4 - n.toString().length).join("0") + n

###*
Create a migration with the given `name`.

@param {String} name
###
create = (name) ->
  path = join("migrations", name + ".js")
  log "create", join(process.cwd(), path)
  fs.writeFileSync path, template
  return

###*
Perform a migration in the given `direction`.

@param {Number} direction
###
performMigration = (direction, migrationName) ->
  migrate options.stateFile or join("migrations", ".migrate")
  migrations().forEach (path) ->
    mod = require(process.cwd() + "/" + path)
    migrate path, mod.up, mod.down
    return

  set = migrate()
  set.on "migration", (migration, direction) ->
    log direction, migration.title
    return

  set.on "save", ->
    log "migration", "complete"
    process.exit()
    return

  migrationPath = (if migrationName then join("migrations", migrationName) else migrationName)
  set[direction] null, migrationPath
  return
migrate = require("../")
join = require("path").join
fs = require("fs")
args = process.argv.slice(2)
options = args: []
cwd = undefined
usage = [
  ""
  "  Usage: migrate [options] [command]"
  ""
  "  Options:"
  ""
  "     -c, --chdir <path>   change the working directory"
  "     --state-file <path>  set path to state file (migrations/.migrate)"
  ""
  "  Commands:"
  ""
  "     down   [name]    migrate down till given migration"
  "     up     [name]    migrate up till given migration (the default command)"
  "     create [title]   create a new migration file with optional [title]"
  ""
].join("\n")
template = [
  ""
  "exports.up = function(next){"
  "  next();"
  "};"
  ""
  "exports.down = function(next){"
  "  next();"
  "};"
  ""
].join("\n")
arg = undefined
while args.length
  arg = args.shift()
  switch arg
    when "-h", "--help", "help"
      console.log usage
      process.exit()
    when "-c", "--chdir"
      process.chdir cwd = required()
    when "--state-file"
      options.stateFile = required()
    else
      if options.command
        options.args.push arg
      else
        options.command = arg
try
  fs.mkdirSync "migrations", 0774
commands =
  up: (migrationName) ->
    performMigration "up", migrationName
    return

  down: (migrationName) ->
    performMigration "down", migrationName
    return

  create: ->
    migrations = fs.readdirSync("migrations").filter((file) ->
      file.match /^\d+/
    ).map((file) ->
      parseInt file.match(/^(\d+)/)[1], 10
    ).sort((a, b) ->
      a - b
    )
    curr = pad((migrations.pop() or 0) + 1)
    title = slugify([].slice.call(arguments).join(" "))
    title = (if title then curr + "-" + title else curr)
    create title
    return


# invoke command
command = options.command or "up"
abort "unknown command \"" + command + "\""  unless command of commands
command = commands[command]
command.apply this, options.args
